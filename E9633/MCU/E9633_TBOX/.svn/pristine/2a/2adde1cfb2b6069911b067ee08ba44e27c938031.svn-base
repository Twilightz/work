/*
********************************************************************************
*  Copyright (C), 2009-2013, 合众思壮西安研发中心
*
*  项目名称：xxxx
*  
*  文件名称: xxxx.c
*
*  文件描述：xxxx
*             
*             
*  创 建 者: 皇海明
*
*  创建日期：2013-03-18 
*
*  版 本 号：V1.0
*
*  修改记录： 
*             
*      1. 日    期： 
*         修 改 人： 
*         所作修改： 
*      2. ...
********************************************************************************
*/
#include "Can.h"
#include "Uart.h"
#include "Shell.h"
#include "Delay.h"
#include "CanDrv.h"
#include "Obd.h"
#include "Public.h"
#include "J1939.h"
#include "bsp_iwdg.h"
#include "UartProcess.h"
extern CANPACKET sendcanpacket;
extern CHANNEL_TYPE_T channel;
extern DiagnosticRequestHandle* PrequestHandle;
extern u8 Cantransmitstute;
void Can1Test(void)
{
	  CANQUEDATA candata;
	
	  candata.Dlc = 0x08;
		candata.Id = 0x7df;
		
	  candata.Data[0] = 0x01;
	  candata.Data[1] = 0x02;
	  candata.Data[2] = 0x03;
	  candata.Data[3] = 0x04;
	  candata.Data[4] = 0x05;
	  candata.Data[5] = 0x06;
	  candata.Data[6] = 0x07;
	  candata.Data[7] = 0x08;
	  CanTransmit(&Can1, &candata);
}

void Can2Test(void)
{
	  CANQUEDATA candata;
	
	  candata.Dlc = 0x08;
		candata.Id = 0x7df;
		
	  candata.Data[0] = 0x01;
	  candata.Data[1] = 0x02;
	  candata.Data[2] = 0x03;
	  candata.Data[3] = 0x04;
	  candata.Data[4] = 0x05;
	  candata.Data[5] = 0x06;
	  candata.Data[6] = 0x07;
	  candata.Data[7] = 0x08;
	  CanTransmit(&Can2, &candata);
}

/*
********************************************************************************
*  函数名称: CanToUtcp
*
*  功能描述: 将CAN总线数据直接打包成UTCP二进制数据传输协议发送。
*            
*
*  输入参数: 无
*
*  输出参数: 无
*
*  返 回 值: 无
*
********************************************************************************
*/
void CanToUtcp(u8 channel, CANX * pcan, COMX * pcom)
{
    u8 i, IDE, buf[20];
	  u16 CurrentPacketLen = 0;
    CANQUEDATA data;

    if(channel != 1 && channel != 2)
    {
        return;
    }
    
    else if(pcan == NULL || pcom == NULL)
    {
        return;
    }
    
    while(CanReceive(pcan, &data))
    {
			  IWDG_Feed();
        buf[0] = channel;
        buf[1] = (u8)(data.Id >> 24);
        buf[2] = (u8)(data.Id >> 16);
        buf[3] = (u8)(data.Id >> 8);
        buf[4] = (u8)(data.Id >> 0);
        buf[5] = data.Dlc;
        for (i = 0; i < data.Dlc; i++)
        {
            buf[6 + i] = data.Data[i];
        }
        if (data.Dlc < 8)
        {
            memset(buf + 6 + data.Dlc, 0, 8 - data.Dlc);
        }
        //
        
        IDE = (u8)0x04 & data.Id;
        if(IDE == CAN_ID_STD)
        {
            data.Id = (u32)0x000007FF & (data.Id >> 21);
        }
        else if(IDE == CAN_ID_EXT)
        {
            data.Id = (u32)0x1FFFFFFF & (data.Id >> 3);
        }
        RTU_DEBUG("data.Id=%x\r\n",data.Id);
        
        //远程帧
        if((buf[4]&0x02) == 0x02)
        {
            sendcanpacket.candata[0] = 0x41;
            CurrentPacketLen = CANCHANNEL+CANID;
            c16toa(&CurrentPacketLen,&sendcanpacket.candata[1]);
            memcpy(&sendcanpacket.candata[FIXED_LENGTH],buf,CurrentPacketLen);
            senddatapacket(&COM3,sendcanpacket.candata,FIXED_LENGTH+CurrentPacketLen+CHECKSUM);
        }
        //数据帧
        else
        {
            sendcanpacket.candata[0] = 0x41;
            CurrentPacketLen = data.Dlc+6;
            c16toa(&CurrentPacketLen,&sendcanpacket.candata[1]);
            memcpy(&sendcanpacket.candata[FIXED_LENGTH],buf,14);
            senddatapacket(&COM3,sendcanpacket.candata,FIXED_LENGTH+14+CHECKSUM);
        }    
    }
}

void UartDataToCanData(u8 len, u8 *Data)
{
	  u8 i;
		CANQUEDATA data;
	
		if(Data == NULL && len == 0)
		{
			 return;
		}
		memset(&data, 0, sizeof(CANQUEDATA));
		data.Id = ((Data[1] << 24) | (Data[2] << 16) | (Data[3] << 8) | Data[4]);
		data.Dlc = Data[5];
	  
  	//判断是数据帧CAN_RTR_Data,还是远程帧CAN_RTR_Remote

		RTU_DEBUG("data.Id=%x\r\n",data.Id);
		for(i = 0; i <data.Dlc; i++)
		{
			data.Data[i] = Data[i+6];
			RTU_DEBUG("%x",data.Data[i]);
		}
		if(channel == CAN_CHANNEL_1)
		{
			  RTU_DEBUG("send can channel 1\r\n");
				CanTransmit(&Can1, &data);
			
    }else if(channel == CAN_CHANNEL_2)
		{
			  RTU_DEBUG("send can channel 2\r\n");
				CanTransmit(&Can2, &data);
		}
}

void CAN_SetFilterStd_(u16 id)
{
	 u8 i,num;
	 u16 tmp,mask;
	 u16 StdIdArray[1];

   CAN_FilterInitTypeDef  CAN_FilterInitStructure;
  
   StdIdArray[0] = id;
   //RTU_DEBUG("CAN1_SetFilterStd_\r\n");
	 //RTU_DEBUG("id=%x\r\n",id);
	 if(channel == CAN_CHANNEL_1)
	 {
			CAN_FilterInitStructure.CAN_FilterNumber = 0;
	 }else if(channel == CAN_CHANNEL_2)
	 {
			CAN_FilterInitStructure.CAN_FilterNumber = 14;
	 }
   CAN_FilterInitStructure.CAN_FilterMode   = CAN_FilterMode_IdMask;
   CAN_FilterInitStructure.CAN_FilterScale  = CAN_FilterScale_32bit;
	 CAN_FilterInitStructure.CAN_FilterIdHigh         = (StdIdArray[0] << 5)&0xffff;
	 //RTU_DEBUG("CAN_FilterInitStructure.CAN_FilterIdHigh=%x\r\n",CAN_FilterInitStructure.CAN_FilterIdHigh);
	 CAN_FilterInitStructure.CAN_FilterIdLow          = 0;
	
	 num = sizeof(StdIdArray)/sizeof(StdIdArray[0]);
   for(i=0;i<num;i++)
   {
			tmp = (StdIdArray[0] << 5)&(StdIdArray[i] << 5);
			mask = tmp;
   }
	 //RTU_DEBUG("mask=%x\r\n",mask);
				
	 CAN_FilterInitStructure.CAN_FilterMaskIdHigh     = mask;
   CAN_FilterInitStructure.CAN_FilterMaskIdLow      = 0xffff; 
   CAN_FilterInitStructure.CAN_FilterFIFOAssignment = CAN_FIFO0;
   CAN_FilterInitStructure.CAN_FilterActivation     = ENABLE;
   CAN_FilterInit(&CAN_FilterInitStructure);
}

void CAN_SetFilterStd()
{
	 u8 i,num;
	 u16 tmp,mask;
	 u16 StdIdArray[8] = {0x7E8,0x7E9,0x7EA,0x7EB,0x7EC,0x7ED,0x7EE,0x7EF};

   CAN_FilterInitTypeDef  CAN_FilterInitStructure;
 
   //RTU_DEBUG("CAN1_SetFilterStd\r\n");
   if(channel == CAN_CHANNEL_1)
	 {
			CAN_FilterInitStructure.CAN_FilterNumber = 0;
	 }
	 else if(channel == CAN_CHANNEL_2)
	 {
			CAN_FilterInitStructure.CAN_FilterNumber = 14;
	 }
   CAN_FilterInitStructure.CAN_FilterMode   = CAN_FilterMode_IdMask;
   CAN_FilterInitStructure.CAN_FilterScale  = CAN_FilterScale_32bit;
	 CAN_FilterInitStructure.CAN_FilterIdHigh         = (StdIdArray[0] << 5)&0xffff;
	 CAN_FilterInitStructure.CAN_FilterIdLow          = 0;
	
	 num = sizeof(StdIdArray)/sizeof(StdIdArray[0]);
   for(i=0;i<num;i++)
   {
			tmp = (StdIdArray[0] << 5)&(StdIdArray[i] << 5);
			mask = tmp;
   }		
	 CAN_FilterInitStructure.CAN_FilterMaskIdHigh     = mask;
   CAN_FilterInitStructure.CAN_FilterMaskIdLow      = 0xffff; 
	 CAN_FilterInitStructure.CAN_FilterFIFOAssignment = CAN_FIFO0;
   CAN_FilterInitStructure.CAN_FilterActivation     = ENABLE;
   CAN_FilterInit(&CAN_FilterInitStructure);
}


void CAN_SetFilterExt()
{
	u32 ID;
  CAN_FilterInitTypeDef  CAN_FilterInitStructure;
   
	//RTU_DEBUG("CAN1_SetFilterExt\r\n");
	ID = 0x18DAF100;
	if(channel == CAN_CHANNEL_1)
	{
		CAN_FilterInitStructure.CAN_FilterNumber=0;
	}
	else if(channel == CAN_CHANNEL_2)
	{
		CAN_FilterInitStructure.CAN_FilterNumber=14;
	}
	CAN_FilterInitStructure.CAN_FilterMode=CAN_FilterMode_IdMask;
	CAN_FilterInitStructure.CAN_FilterScale=CAN_FilterScale_32bit;
	CAN_FilterInitStructure.CAN_FilterIdHigh=(((u32)ID<<3)&0xffff0000)>>16;
	CAN_FilterInitStructure.CAN_FilterIdLow=(((u32)ID<<3)|CAN_ID_EXT|CAN_RTR_DATA)&0xffff;
	CAN_FilterInitStructure.CAN_FilterMaskIdHigh=0xffff;
	CAN_FilterInitStructure.CAN_FilterMaskIdLow=0xff00;//0xffff
	CAN_FilterInitStructure.CAN_FilterFIFOAssignment=CAN_FIFO0;
	CAN_FilterInitStructure.CAN_FilterActivation=ENABLE;
	CAN_FilterInit(&CAN_FilterInitStructure);
}

void OBD_Send_singleframe(void *handle)
{
	
	  bool Is_Filtered = FALSE;
	  u16 FilterId;
		u8 i = 0;
		CANQUEDATA candata;
	  static u8 sendcount = 0;
	  if(handle == NULL)
			 return;
		
		RTU_DEBUG("OBD_Send_singleframe\r\n");
		PrequestHandle = (DiagnosticRequestHandle*)handle;
		candata.Dlc = 0x08;
		candata.Id = PrequestHandle->Request.Id;
		
		
		candata.RTR = candata.Id & 0x0002;
    candata.IDE = candata.Id & 0x0004;
	
		if(candata.IDE == DIAGNOSTIC_CAN_ID_STANDARD)
		{
				candata.Id = (candata.Id >> 16);
		}
		else if(candata.IDE == DIAGNOSTIC_CAN_ID_EXTENDED)
		{
			  candata.Id = candata.Id -4;
			  //RTU_DEBUG("candata.Id=%x\r\n",candata.Id);
		}
		RTU_DEBUG("candata.Id=%x\r\n",candata.Id);
    memcpy(&candata.Data[0], PrequestHandle->Request.DataField,0x08);

		for(i=0;i<8;i++)
		  RTU_DEBUG("%x ",candata.Data[i]);
		
		//判断是否设置ID过滤

		Is_Filtered = PrequestHandle->Request.BitField&0x01;
		if(Is_Filtered == TRUE)
		{
			 if(candata.IDE == DIAGNOSTIC_CAN_ID_STANDARD)
			 {
				  //若是功能地址,则不需要过滤
				  if(candata.Id == 0x7df)
					{
						 CAN_SetFilterStd();
					}
					else if(candata.Id >= 0x7e0)
					{
						 FilterId = candata.Id + 0x08;
						 //RTU_DEBUG("FilterId=%x\r\n",FilterId);
						 CAN_SetFilterStd_(FilterId);
					}
			 }
			 else if(candata.IDE == DIAGNOSTIC_CAN_ID_EXTENDED)
			 {

						 CAN_SetFilterExt();
			 }	
			 
		}
    if(channel == CAN_CHANNEL_1)
		{
			 CanTransmit(&Can1, &candata);
			 RTU_DEBUG("OBD_Send_singleframe:channel 1\r\n");
		}
		else if(channel == CAN_CHANNEL_2)
		{
			 //while(Cantransmitstute == FALSE)
			 //{
				//  if(sendcount<3)
				//	{  
							CanTransmit(&Can2, &candata);
			        RTU_DEBUG("OBD_Send_singleframe:channel 2\r\n");
				//		  DelayMS(50);
				//		  RTU_DEBUG("CanTransmit->sendcount=%x\r\n",sendcount);
				//			sendcount++;
				//	}
				//	if(sendcount == 3)
				//		break;
			 //};
			 //RTU_DEBUG("CanTransmit end->sendcount=%x\r\n",sendcount);
			 //if(sendcount == 3 || Cantransmitstute == TRUE)
			 //{
				//	sendcount = 0;
				//  Cantransmitstute = FALSE;
			 //}
		}
	
}

void OBD_ReceiveMessages(u8 channel, CANX * pcan, COMX * pcom)
{

    u8  IDE;          
    u8 i, buf[20];
    CANQUEDATA data;
    DiagnosticResponse response;
    if(channel != 1 && channel != 2)
    {
        return;
    }
    else if(pcan == NULL || pcom == NULL)
    {
        return;
    }
    while(CanReceive(pcan, &data))
    {
        buf[0] = channel;
				buf[1] = (u8)(data.Id >> 24);
        buf[2] = (u8)(data.Id >> 16);
        buf[3] = (u8)(data.Id >> 8);
        buf[4] = (u8)(data.Id >> 0);

        buf[5] = data.Dlc;
				for (i = 0; i < data.Dlc; i++)
        {
            buf[6 + i] = data.Data[i];
        }
				if (data.Dlc < 8)
				{
						memset(buf + 6 + data.Dlc, 0, 8 - data.Dlc);
				}
				//RTU_DEBUG("OBD_ReceiveMessages\r\n");
				IDE = (u8)0x04 & data.Id;
				if(IDE == CAN_ID_STD)
				{
						data.Id = (u32)0x000007FF & (data.Id >> 21);
				}
				else if(IDE == CAN_ID_EXT)
				{
						data.Id = (u32)0x1FFFFFFF & (data.Id >> 3);
				}		
				response.Id = data.Id;
				//RTU_DEBUG("channel=%d,response.Id=%x\r\n",channel,response.Id);
				response.length = data.Dlc;
				//for(i=0;i<data.Dlc;i++)
				//  RTU_DEBUG("%x ",data.Data[i]);
				memcpy(response.DataField,data.Data,data.Dlc);
				PrequestHandle->networkcallback(&response);
    }
}

void J1939_ReceiveMessages(u8 channel, CANX * pcan, COMX * pcom)
{

    u8  IDE;       //判断是标准ID还是扩展ID   
    u8 i, buf[20];
    CANQUEDATA data;
    DiagnosticResponse response;
    if(channel != 1 && channel != 2)
    {
        return;
    }
    
    else if(pcan == NULL || pcom == NULL)
    {
        return;
    }
    while(CanReceive(pcan, &data))
    {
        buf[0] = channel;
				buf[1] = (u8)(data.Id >> 24);
        buf[2] = (u8)(data.Id >> 16);
        buf[3] = (u8)(data.Id >> 8);
        buf[4] = (u8)(data.Id >> 0);

        buf[5] = data.Dlc;
				for (i = 0; i < data.Dlc; i++)
        {
            buf[6 + i] = data.Data[i];
        }
				if (data.Dlc < 8)
				{
						memset(buf + 6 + data.Dlc, 0, 8 - data.Dlc);
				}
				//向串口发送CAN数据
				IDE = (u8)0x04 & data.Id;
				if(IDE == CAN_ID_STD)
				{
					data.Id = (u32)0x000007FF & (data.Id >> 21);
				}
				else if(IDE == CAN_ID_EXT)
				{
					data.Id = (u32)0x1FFFFFFF & (data.Id >> 3);
				}		
				response.Id = data.Id;
				//RTU_DEBUG("channel = %d,response.Id=%x\r\n",channel,response.Id);
				response.length = data.Dlc;
				//for(i=0;i<data.Dlc;i++)
				//  RTU_DEBUG("%x ",data.Data[i]);
				memcpy(response.DataField,data.Data,data.Dlc);
				//回调函数
				PrequestHandle->appcallback(&response);
    }
}
void J1939_CAN_SetFilterExt(u32 ExtId)
{
		//u8 num,i;
		u32 tmp,mask=0;
		//u32 ExtIdArrary[2] = {0x18FEE900,0x18F00900};
		CAN_FilterInitTypeDef  CAN_FilterInitStructure;
   
		//RTU_DEBUG("J1939_CAN_SetFilterExt\r\n");	
		//RTU_DEBUG("ExtId=%x\r\n",ExtId);	
	
	  if(channel == CAN_CHANNEL_1)
		{
				CAN_FilterInitStructure.CAN_FilterNumber=0;
		}else if (channel == CAN_CHANNEL_2)
	  {
				CAN_FilterInitStructure.CAN_FilterNumber=14;
		}
		CAN_FilterInitStructure.CAN_FilterMode=CAN_FilterMode_IdMask;
		CAN_FilterInitStructure.CAN_FilterScale=CAN_FilterScale_32bit;
	
		CAN_FilterInitStructure.CAN_FilterIdHigh=((ExtId<<3)>>16)&0xffff;
		CAN_FilterInitStructure.CAN_FilterIdLow=((ExtId<<3)&0xffff)|CAN_ID_EXT;
	
		//CAN_FilterInitStructure.CAN_FilterIdHigh=((ExtIdArrary[0]<<3)>>16)&0xffff;
		//CAN_FilterInitStructure.CAN_FilterIdLow=((ExtIdArrary[0]<<3)&0xffff)|CAN_ID_EXT;
	
		mask = 0x1fffffff;
	
		//num = sizeof(ExtIdArrary)/sizeof(ExtIdArrary[0]);
		//RTU_DEBUG("num=%x\r\n",num);
		//for(i=0;i<num;i++)
		//{
				//RTU_DEBUG("num=%x\r\n",num);
				//tmp = ExtIdArrary[i]^(~ExtIdArrary[0]);
				//mask &=tmp;
		//}
		tmp = ExtId^(~ExtId);
		mask &=tmp;
		mask <<= 3;
		CAN_FilterInitStructure.CAN_FilterMaskIdHigh=(mask>>16)&0xffff;
		CAN_FilterInitStructure.CAN_FilterMaskIdLow=(mask&0xffff)|0x02;
		CAN_FilterInitStructure.CAN_FilterFIFOAssignment=CAN_FIFO0;
		CAN_FilterInitStructure.CAN_FilterActivation=ENABLE;
		CAN_FilterInit(&CAN_FilterInitStructure);
}

static u32 J1939_Translate_IdExt (u8 Priority,u8 Pdu_PF,u8 Pdu_Ps,u8 Pdu_Sa)
{
		u32 Id_Ext = 	0x00000000;
		Id_Ext     =    Id_Ext|Priority<<26;
		Id_Ext     =    ((Id_Ext>>16)|Pdu_PF)<<16;
		Id_Ext     =    ((Id_Ext>>8)|Pdu_Ps)<<8;
		Id_Ext     =    Id_Ext|Pdu_Sa;
		return     Id_Ext;
}

void J1939_CAN_Transmit(J1939_MESSAGE_T *MsgPtr,void *handle)
{
	  u32 i,j;
	  u8 SendStatus;
	  CANQUEDATA candata;
	
	  //发送CAN帧之前，需要确定是数据帧、远程帧、标准ID还是扩展ID？
	  candata.RTR = CAN_RTR_Data;
	  candata.IDE = CAN_Id_Extended;
	
	  PrequestHandle = (DiagnosticRequestHandle*)handle;
	
	  candata.Id  = J1939_Translate_IdExt(MsgPtr->Priority,MsgPtr->PDUFormat,MsgPtr->PDUSpecific,MsgPtr->SourceAddress);
	  candata.Dlc = MsgPtr->DataLength;
	  memcpy(&candata.Data[0], &MsgPtr->Data[0],candata.Dlc);
		RTU_DEBUG("candata.Id=%x\r\n",candata.Id);
		//RTU_DEBUG("candata.Dlc=%d\r\n",candata.Dlc);
	  for(i=0;i<candata.Dlc;i++)
	    RTU_DEBUG("%x ",candata.Data[i]);
	
	
	if(channel == CAN_CHANNEL_1)
    {		
			  RTU_DEBUG("channel 1->J1939 send data\r\n");
				CanTransmit(&Can1, &candata);
		}
		else if(channel == CAN_CHANNEL_2)
		{
			  RTU_DEBUG("channel 2->J1939 send data\r\n");
			  CanTransmit(&Can2, &candata);
		}
	  #if 0
		for(j=0;j<3;j++)
		{
				CanTransmit(&Can1, &candata);
			  i = 0;
				while(sendstatus != CAN_TxStatus_Ok && i<0x800)
				{
					i++;
				}
				if(sendstatus == CAN_TxStatus_Ok)
				{
					break;
				}
				if(i==0x800)
				{
					if(j==2)
					{
							RTU_DEBUG("respone send fail");
					}
				}
		}
		#endif
}
