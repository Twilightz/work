/*
********************************************************************************
*  Copyright (C), 2009-2013, 合众思壮西安研发中心
*
*  项目名称：xxxx
*  
*  文件名称: xxxx.c
*
*  文件描述：xxxx
*             
*             
*  创 建 者: 皇海明
*
*  创建日期：2013-03-18 
*
*  版 本 号：V1.0
*
*  修改记录： 
*             
*      1. 日    期： 
*         修 改 人： 
*         所作修改： 
*      2. ...
********************************************************************************
*/
#include "stm32f10x_adc.h"
#include "shell.h"
/*
********************************************************************************
*  函数名称: ADC_Configuration
*
*  功能描述:ADC 初始化
*
*  输入参数: 无
*
*  输出参数: 无
*
*  返 回 值: 无
*
********************************************************************************
*/

#include "Public.h"
#include <string.h>

#define ADC_RESULT_IN_MILLI_VOLTS(ADC_VALUE)\
          ((((ADC_VALUE) * 439)  * 2 )/ 1024)


#define VOLTAGE_AVG_NUM 6



u8 batteryvolt[10] = {0x33, 0x00, 0x04};

u16 batt_lvl_in_milli_volts;
static uint32_t battery_voltage_arrary[VOLTAGE_AVG_NUM]={0};


void ADC_Configuration(void)
{
	
		ADC_InitTypeDef ADC_InitStructure; 

    RCC_APB2PeriphClockCmd(RCC_APB2Periph_ADC1, ENABLE);	
    RCC_ADCCLKConfig(RCC_PCLK2_Div6); //ADC 时钟12M hz
    ADC_InitStructure.ADC_Mode = ADC_Mode_Independent; 
    ADC_InitStructure.ADC_ScanConvMode =DISABLE;//单通道扫描
    ADC_InitStructure.ADC_ContinuousConvMode = ENABLE;//连续转换 ENABLE
    ADC_InitStructure.ADC_ExternalTrigConv = ADC_ExternalTrigConv_None;//2//不采用外部触发转换
    ADC_InitStructure.ADC_DataAlign = ADC_DataAlign_Right; //输出的数据右对齐
    ADC_InitStructure.ADC_NbrOfChannel=1;//只有一个通道需要采样
    ADC_Init(ADC1, &ADC_InitStructure);
    ADC_RegularChannelConfig(ADC1, ADC_Channel_10,1,ADC_SampleTime_55Cycles5 );//设置采样通道、次序和采样时间
    ADC_Cmd(ADC1, ENABLE);//使能ADC
    ADC_ResetCalibration(ADC1); //重置校准
    while(ADC_GetResetCalibrationStatus(ADC1));//等待重置校准完成
    ADC_StartCalibration(ADC1);//启动校准
    while(ADC_GetCalibrationStatus(ADC1)); //等待校准完成
    ADC_SoftwareStartConvCmd(ADC1, ENABLE); //开始启动软件转换
}

void ADC1_SAMPLING(void)
{
	  int i,j;
    u16 rdata;
	  char batteryvoltstr[4];
	  u8 battery_voltage_arrary_index;
	  //用于保存转换计算后的电压值 	 
		float ADC_ConvertedValueLocal;
	

	  batt_lvl_in_milli_volts = 0;
	  battery_voltage_arrary_index = 0;
	  ADC_ConvertedValueLocal = 0;
    while(ADC_GetFlagStatus(ADC1, ADC_FLAG_EOC) == RESET);//通过判断EOC是否发送完
    ADC_ClearITPendingBit(ADC1, ADC_FLAG_EOC);//清除转换标志位
	
    rdata = ADC_GetConversionValue(ADC1);
    batt_lvl_in_milli_volts = ADC_RESULT_IN_MILLI_VOLTS(rdata);
    for(i = 0;i < VOLTAGE_AVG_NUM; i++)
	     battery_voltage_arrary[i] = 0;
    if( battery_voltage_arrary[0] == 0 ){
		battery_voltage_arrary_index = 0;
		for( i = 0; i < VOLTAGE_AVG_NUM; i++ ){
			battery_voltage_arrary[i] = batt_lvl_in_milli_volts;
			}
    }else{
         battery_voltage_arrary[battery_voltage_arrary_index] = batt_lvl_in_milli_volts;
         battery_voltage_arrary_index = ( battery_voltage_arrary_index + 1 )%VOLTAGE_AVG_NUM;
         batt_lvl_in_milli_volts = 0;
         for( j = 0; j < VOLTAGE_AVG_NUM; j++ ){
               batt_lvl_in_milli_volts += battery_voltage_arrary[j];
         }
         batt_lvl_in_milli_volts /= VOLTAGE_AVG_NUM;
    }
		//ADC_ConvertedValueLocal = ((float)batt_lvl_in_milli_volts*10.0)/10000 +0.5;//110.0
	  RTU_DEBUG("batt_lvl_in_milli_volts=%.2f!\r\n",(float)batt_lvl_in_milli_volts);	
		#if 0
		if(ADC_ConvertedValueLocal >= 19.8&&ADC_ConvertedValueLocal<27.8)
			ADC_ConvertedValueLocal = ADC_ConvertedValueLocal+0.8;
		else if(ADC_ConvertedValueLocal >= 27.8&&ADC_ConvertedValueLocal<36.0)
			ADC_ConvertedValueLocal = ADC_ConvertedValueLocal+0.8;
		else if(ADC_ConvertedValueLocal >= 10.0&&ADC_ConvertedValueLocal<27.8)
			ADC_ConvertedValueLocal = ADC_ConvertedValueLocal+0.8;
		else if(ADC_ConvertedValueLocal >= 6.0&&ADC_ConvertedValueLocal<10.0)
			ADC_ConvertedValueLocal = ADC_ConvertedValueLocal+0.8;
		
		f2s(ADC_ConvertedValueLocal,batteryvoltstr);
		memcpy(&batteryvolt[3],batteryvoltstr,4);
		#endif
		//RTU_DEBUG("ADC_ConvertedValueLocal=%.2f!\r\n",ADC_ConvertedValueLocal);	
}







