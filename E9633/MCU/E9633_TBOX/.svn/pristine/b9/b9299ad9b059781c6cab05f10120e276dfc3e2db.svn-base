/*
********************************************************************************
*  Copyright (C), 2009-2013, 
*
*  项目名称：xxxx
*  
*  文件名称: xxxx.c
*
*  文件描述：xxxx
*             
*             
*  创 建 者:
*
*  创建日期：2017-12-11 
*
*  版 本 号：V1.0
*
*  修改记录： 
*             
*      1. 日    期： 
*         修 改 人： 
*         所作修改： 
*      2. ...
********************************************************************************
*/
#include "Adc.h"
#include "sleep.h"
#include "Timer.h"
#include "Uart.h"
#include "Exti.h"
#include "shell.h"
#include "UartProcess.h"
#include "lis331dlh_driver.h"
#include "System_stm32f10x.h"
/*
********************************************************************************                                                                  
*  外部变量声明                                                                                                       
********************************************************************************
*/
extern bool is_E9631_Boot;
extern bool is_accon_ack;
extern bool is_accoff_ack;
bool is_open_timer6 = FALSE;
bool is_open_timer3 = FALSE;
extern u8 accon_ack;
//点火
u8 turnoncmd[6] = {0x30, 0x00, 0x01,0x01};
//熄火
u8 turnoffcmd[6] = {0x30, 0x00, 0x01, 0x00};
	
u32 Timer6Count = 0;

/*
********************************************************************************
*  函数名称: TIMER3_Configuration
*
*  功能描述: 定时器初始化
*
*  输入参数: 无
*
*  输出参数: 无
*
*  返 回 值: 无
*
********************************************************************************
*/

void TIMER3_Configuration(void)
{
    TIM_TimeBaseInitTypeDef TIM_TimeBaseStructure; 
    NVIC_InitTypeDef NVIC_InitStructure;

    RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM3 , ENABLE); /* 时钟使能*/
	
    TIM_DeInit(TIM3); /*重新将Timer设置为缺省值*/
	
    TIM_TimeBaseStructure.TIM_Period=20000-1; /*自动重装载寄存器周期的值(计数  值) 1s*/
    TIM_TimeBaseStructure.TIM_Prescaler= (uint16_t) (SystemCoreClock / 20000) - 1;  /* 时钟预分频数 72M/20000 -1 */  
 
    TIM_TimeBaseStructure.TIM_ClockDivision=TIM_CKD_DIV1;  /* 采样分频 */  
    TIM_TimeBaseStructure.TIM_CounterMode=TIM_CounterMode_Up; /* 向上计数模式 */  
    TIM_TimeBaseInit(TIM3, &TIM_TimeBaseStructure);  
	
    TIM_ClearFlag(TIM3, TIM_FLAG_Update);  /* 清除溢出中断标志 */    
	
    TIM_ITConfig(TIM3,TIM_IT_Update,ENABLE);  
  

    NVIC_PriorityGroupConfig(NVIC_PriorityGroup_4);  
    NVIC_InitStructure.NVIC_IRQChannel = TIM3_IRQn;            
    NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 4; //优先级最高
    NVIC_InitStructure.NVIC_IRQChannelSubPriority = 3;          
    NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;  
    NVIC_Init(&NVIC_InitStructure);  
}
/*
********************************************************************************
*  函数名称: TIMER4_Configuration
*
*  功能描述: 定时器初始化
*
*  输入参数: 无
*
*  输出参数: 无
*
*  返 回 值: 无
*
********************************************************************************
*/

void TIMER4_Configuration(void)
{
    TIM_TimeBaseInitTypeDef TIM_TimeBaseStructure; 
    NVIC_InitTypeDef NVIC_InitStructure;

    RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM4 , ENABLE); /* 时钟使能*/
	
    TIM_DeInit(TIM4); /*重新将Timer设置为缺省值*/
	
    TIM_TimeBaseStructure.TIM_Period=20000-1; /*自动重装载寄存器周期的值(计数  值) 1s*/
    TIM_TimeBaseStructure.TIM_Prescaler= (uint16_t) (SystemCoreClock / 20000) - 1;  /* 时钟预分频数 72M/20000 -1 */  
 
    TIM_TimeBaseStructure.TIM_ClockDivision=TIM_CKD_DIV1;  /* 采样分频 */  
    TIM_TimeBaseStructure.TIM_CounterMode=TIM_CounterMode_Up; /* 向上计数模式 */  
    TIM_TimeBaseInit(TIM4, &TIM_TimeBaseStructure);  
	
    TIM_ClearFlag(TIM4, TIM_FLAG_Update);  /* 清除溢出中断标志 */    
	
    TIM_ITConfig(TIM4,TIM_IT_Update,ENABLE);  
  

    NVIC_PriorityGroupConfig(NVIC_PriorityGroup_4);  
    NVIC_InitStructure.NVIC_IRQChannel = TIM4_IRQn;            
    NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 4; //优先级最高
    NVIC_InitStructure.NVIC_IRQChannelSubPriority = 3;          
    NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;  
    NVIC_Init(&NVIC_InitStructure);  
}
/*
********************************************************************************
*  函数名称: TIMER5_Configuration
*
*  功能描述: 定时器初始化
*
*  输入参数: 无
*
*  输出参数: 无
*
*  返 回 值: 无
*
********************************************************************************
*/
void TIMER5_Configuration(void)
{
    TIM_TimeBaseInitTypeDef TIM_TimeBaseStructure; 
    NVIC_InitTypeDef NVIC_InitStructure;

    RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM5 , ENABLE); /* 时钟使能*/
	
    TIM_DeInit(TIM5); /*重新将Timer设置为缺省值*/
	
    TIM_TimeBaseStructure.TIM_Period=20000-1; /*自动重装载寄存器周期的值(计数  值) 1s*/
    TIM_TimeBaseStructure.TIM_Prescaler= (uint16_t) (SystemCoreClock / 20000) - 1;  /* 时钟预分频数 72M/20000 -1 */  
 
    TIM_TimeBaseStructure.TIM_ClockDivision=TIM_CKD_DIV1;  /* 采样分频 */  
    TIM_TimeBaseStructure.TIM_CounterMode=TIM_CounterMode_Up; /* 向上计数模式 */  
    TIM_TimeBaseInit(TIM5, &TIM_TimeBaseStructure);  
	
    TIM_ClearFlag(TIM5, TIM_FLAG_Update);  /* 清除溢出中断标志 */    
	
    TIM_ITConfig(TIM5,TIM_IT_Update,ENABLE);  
  

    NVIC_PriorityGroupConfig(NVIC_PriorityGroup_4);  
    NVIC_InitStructure.NVIC_IRQChannel = TIM5_IRQn;            
    NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0; //优先级最低 
    NVIC_InitStructure.NVIC_IRQChannelSubPriority = 3;          
    NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;  
    NVIC_Init(&NVIC_InitStructure);  
}
/*
********************************************************************************
*  函数名称: TIMER6_Configuration
*
*  功能描述: 定时器初始化
*
*  输入参数: 无
*
*  输出参数: 无
*
*  返 回 值: 无
*
********************************************************************************
*/
void TIMER6_Configuration(void)
{
    TIM_TimeBaseInitTypeDef TIM_TimeBaseStructure; 
    NVIC_InitTypeDef NVIC_InitStructure;

    RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM6 , ENABLE); /* 时钟使能*/
	
    TIM_DeInit(TIM6); /*重新将Timer设置为缺省值*/
	
    TIM_TimeBaseStructure.TIM_Period=20000-1; /*自动重装载寄存器周期的值(计数  值) 1s*/
    TIM_TimeBaseStructure.TIM_Prescaler= (uint16_t) (SystemCoreClock / 20000) - 1;  /* 时钟预分频数 72M/20000 -1 */  
 
    TIM_TimeBaseStructure.TIM_ClockDivision=TIM_CKD_DIV1;  /* 采样分频 */  
    TIM_TimeBaseStructure.TIM_CounterMode=TIM_CounterMode_Up; /* 向上计数模式 */  
    TIM_TimeBaseInit(TIM6, &TIM_TimeBaseStructure);  
	
    TIM_ClearFlag(TIM6, TIM_FLAG_Update);  /* 清除溢出中断标志 */    
	
    TIM_ITConfig(TIM6,TIM_IT_Update,ENABLE);  
  

    NVIC_PriorityGroupConfig(NVIC_PriorityGroup_4);  
    NVIC_InitStructure.NVIC_IRQChannel = TIM6_IRQn;            
    NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 3;  
    NVIC_InitStructure.NVIC_IRQChannelSubPriority = 3;          
    NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;  
    NVIC_Init(&NVIC_InitStructure);  
}

/*
定时器3中断处理
*/
void TIM3_IRQHandler(void)   
{
		u8 rdata;
	  static u8 count = 0;
	  static u8 Ackcount = 0;
    //每3秒检测ACC状态
		if (TIM_GetITStatus(TIM3, TIM_IT_Update) != RESET)  
		{
			    //RTU_DEBUG("TIM3_IRQHandler!\r\n");
			    count++;
			    if(count == 3)
					{
						  count = 0;
							rdata = GPIO_ReadInputDataBit(GPIOA, GPIO_Pin_0);
							if(0 == rdata){
									if(is_open_timer6 == TRUE)
									{
										  RTU_DEBUG("TIM3_IRQHandler: Close Timer6!\r\n");
											is_open_timer6 = FALSE;
											TIM_Cmd(TIM6, DISABLE);
										  Timer6Count = 0;
									}
						
									//若没有ACC ON应答，则一直发ACC ON
									if(is_accon_ack == FALSE)
									{
										  RTU_DEBUG("TIM3_IRQHandler: Send Acc On!\r\n");
										  Timer6Count = 0;
										  Ackcount++;
										  //72S后，如果没有收到ACC ON应答，则复位E9631
										  if(Ackcount == 24)
											{
													Ackcount = 0;
												  //NVIC_SystemReset();
												  TIM_Cmd(TIM3, DISABLE);
											    //IWDG_Feed();
												  //长按10S  E9631重启
												 	GPIO_ResetBits(GPIOA, GPIO_Pin_11);
													DelayMS(10);
													GPIO_SetBits(GPIOA, GPIO_Pin_11);
                          GPIO_SetBits(GPIOA, GPIO_Pin_8);
												  DelayMS(10000);
													GPIO_ResetBits(GPIOA, GPIO_Pin_8);	
                          DelayMS(10);											
												  TIM_Cmd(TIM3, ENABLE);  
												  RTU_DEBUG("TIM3_IRQHandler: Reset E9631!\r\n");
											}
											else
											{
												  //使主板开机
												  rdata = GPIO_ReadInputDataBit(GPIOA, GPIO_Pin_11);
												  if(rdata == Bit_RESET)
													{
															GPIO_SetBits(GPIOA, GPIO_Pin_11);
														  RTU_DEBUG("TIM3_IRQHandler: Boot E9631!\r\n");
													}
												  senddatapacket(&COM2,turnoncmd,FIXED_LENGTH+1+CHECKSUM);
											}
									}
							}
							else if(0 != rdata){
								  if(is_open_timer6 == FALSE)
									{
										  RTU_DEBUG("TIM3_IRQHandler: Open Timer6!\r\n");
											is_open_timer6 = TRUE;
											TIM_Cmd(TIM6, ENABLE);
									}
									//若没有ACC OFF应答，则一直发ACC OFF
								
									if(is_accoff_ack == FALSE)
									{
										  RTU_DEBUG("TIM3_IRQHandler: Send Acc Off!\r\n");
											senddatapacket(&COM2,turnoffcmd,FIXED_LENGTH+1+CHECKSUM);
									} 
							}
				}
				TIM_ClearITPendingBit(TIM3, TIM_IT_Update);  
	}				
} 
void TIM4_IRQHandler(void)   
{
    static u8 count = 0;
		if(TIM_GetITStatus(TIM4, TIM_IT_Update) != RESET)  
		{	
			  count++;
			  //if(count == 2)
			//	{
			//		count = 0;	
					ADC1_SAMPLING();
			//	}
		}
		TIM_ClearITPendingBit(TIM4, TIM_IT_Update);  	
}
#if 0
void TIM4_IRQHandler(void)   
{
	  short Angle;
	  i16_t tx,ty,tz;
	  static u8 count = 0;
	  int8_t is_collision = 0;	
	  AxesRaw_t data;
		if(TIM_GetITStatus(TIM4, TIM_IT_Update) != RESET)  
		{	
			  
			  count++;
			  if(count == 30)
				{
					 count = 0;
					 TIM_Cmd(TIM4, DISABLE);
					 DelayMS(20);
					 
					 GPIO_SetBits(GPIOC, GPIO_Pin_7);
					 //GPIO_ResetBits(GPIOA, GPIO_Pin_6);
					 CAN_DeInit(CAN1);
					 EXTI7_Configuration();
					 EXTI8_Configuration();
           GPIO_SetBits(GPIOB, GPIO_Pin_1);					
           DelayMS(20);					
					 //mcu_sleep();
				}
				
	      LIS331DLH_GetAccAxesRaw(&data);
			  RTU_DEBUG("TIM4_IRQHandler: data.AXIS_X=%d,data.AXIS_Y=%d,data.AXIS_Z=%d!\r\n",data.AXIS_X,data.AXIS_Y,data.AXIS_Z);
        lis331dlh_Get_Angle(data.AXIS_X,data.AXIS_Y,data.AXIS_Z,1);
				//Angle = lis331dlh_Get_Angle(data.AXIS_X,data.AXIS_Y,data.AXIS_Z,1);
				//RTU_DEBUG("Angle=%d!\r\n",Angle);

				//is_collision = lis331dlh_check_collision(0);
        //RTU_DEBUG("TIM4_IRQHandler:is_collision=%d!\r\n",is_collision);			
		}
		TIM_ClearITPendingBit(TIM4, TIM_IT_Update);  	
}
#endif
#if 0
void TIM4_IRQHandler(void)   

{
	  static u8 count = 0;
	  int8_t is_collision = 0;	
	  AxesRaw_t data;
		if(TIM_GetITStatus(TIM4, TIM_IT_Update) != RESET)  
		{	
			  //RTU_DEBUG("TIM4_IRQHandler!\r\n");	
			  count++;
			  if(count == 10)
				{
					 count = 0;
					 TIM_Cmd(TIM4, DISABLE);
					 //mcu_sleep();
					 DelayMS(20);
					 
					 //CAN1Init(&Can1, CANX_BAUD_250K,1);
					 GPIO_SetBits(GPIOC, GPIO_Pin_7);
					 GPIO_ResetBits(GPIOA, GPIO_Pin_6);
					CAN_DeInit(CAN1);
					EXTI8_Configuration(); 	
         DelayMS(20);					
					mcu_sleep();
	
					//GPIO_ResetBits(GPIOA, GPIO_Pin_6);
				//	  count = 0;
				    //LIS331DLH_GetAccAxesRaw(&data);
					  //RTU_DEBUG("TIM4_IRQHandler: data.AXIS_X=%d,data.AXIS_Y=%d,data.AXIS_Z=%d!\r\n",data.AXIS_X,data.AXIS_Y,data.AXIS_Z);
        //is_collision = lis331dlh_check_collision(0);
        //RTU_DEBUG("TIM4_IRQHandler:is_collision=%d!\r\n",is_collision);			
				}
			  TIM_ClearITPendingBit(TIM4, TIM_IT_Update);  	
		} 
}
#endif
#if 0
void TIM4_IRQHandler(void)   
{
	  static u8 count = 0;
		if(TIM_GetITStatus(TIM4, TIM_IT_Update) != RESET)  
		{	
			  count++;
			  if(count == 3)
				{
					count = 0;
					//如果开机马上收到ACC ON应答，则复位E9631
					if(is_accon_ack == TRUE)
					{
						 TIM_Cmd(TIM4, DISABLE);
						 //长按12S  E9631重启
						 GPIO_ResetBits(GPIOA, GPIO_Pin_11);
						 DelayMS(10);
						 GPIO_SetBits(GPIOA, GPIO_Pin_11);
             GPIO_SetBits(GPIOA, GPIO_Pin_8);
						 DelayMS(12000);
						 GPIO_ResetBits(GPIOA, GPIO_Pin_8);	
             DelayMS(10);	
						 is_accon_ack = FALSE;
						 TIM_Cmd(TIM4, ENABLE);
             RTU_DEBUG("TIM4_IRQHandler: Reset E9631!\r\n");					
					}
					else if(is_accon_ack == FALSE)
					{
						 RTU_DEBUG("Open Timer3!\r\n");
						 TIM_Cmd(TIM3, ENABLE);
						 is_open_timer3 = TRUE;
						 TIM_Cmd(TIM4, DISABLE);
						
					}
				}
			  TIM_ClearITPendingBit(TIM4, TIM_IT_Update);  	
		} 
}
#endif
/*
定时器5中断处理
跳转到bootloader进行远程升级
*/
void TIM5_IRQHandler(void)   
{
		if(TIM_GetITStatus(TIM5, TIM_IT_Update) != RESET)  
		{	
				TIM_Cmd(TIM5, DISABLE);
				__set_FAULTMASK(1);
				NVIC_SystemReset();
				TIM_ClearITPendingBit(TIM5, TIM_IT_Update);   
		}
}

/*
定时器6中断处理
*/
void TIM6_IRQHandler(void)   
{
	  u8 rdata;
	  RTU_DEBUG("TIM6_IRQHandler:Timer6Count=%d\r\n",Timer6Count);
	  
		if(TIM_GetITStatus(TIM6, TIM_IT_Update) != RESET)  
		{

			 Timer6Count++;
			 //30秒后还是检测到ACC OFF则自动关机
       if(Timer6Count == 30)
       {
				  rdata = GPIO_ReadInputDataBit(GPIOA, GPIO_Pin_0);
					if(0 != rdata){
						  RTU_DEBUG("TIM6_IRQHandler:Shut down after 30 seconds\r\n");
							GPIO_ResetBits(GPIOA, GPIO_Pin_11);
					}
					Timer6Count = 0;
			 }
       else if(Timer6Count > 30)
       {
          Timer6Count = 0;
			 }				 
			 TIM_ClearITPendingBit(TIM6, TIM_IT_Update);
		}
} 




