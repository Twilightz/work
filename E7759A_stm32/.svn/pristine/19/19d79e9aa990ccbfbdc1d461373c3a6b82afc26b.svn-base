/*
********************************************************************************
*  Copyright (C), 2009-2012, 合众思壮西安研发中心
*
*  项目名称：E6202
*  
*  文件名称: Shell.c
*
*  文件描述：shell应用函数源文件
*             
*             
*  创 建 者: 皇海明
*
*  创建日期：2013-03-18 
*
*  版 本 号：V1.0
*
*  修改记录： 
*             
*      1. 日    期： 
*         修 改 人： 
*         所作修改：           
*      2. ...
********************************************************************************
*/

#define SHELL_GLOBALS
#include "Shell.h"
#include "string.h"
#include "stdlib.h"
#include "stdio.h"
#include "AppPrintf.h"
#include "Public.h"



/*
********************************************************************************                                                                  
*  内部函数声明                                                                                                        
********************************************************************************
*/




/*
********************************************************************************                                                                 
*  内部变量定义                                                                                                         
********************************************************************************
*/
s16     ChNum;
char    CmdChar[MAX_CMD_LEN];
u16     DebugMode;

 
/*
********************************************************************************
*  函数名称: ShellInit
*
*  功能描述: shell解析初始化
*
*  输入参数: 无
*
*  输出参数: 无
*
*  返 回 值: 无
*
********************************************************************************
*/
void ShellInit(void)
{ 
    // 调试用串口初始化
    //ShellComInit(115200, COM_PARA_8N1);//115200
    ChNum     = 0;
    DebugMode = RELEASE_MODE;
}

/*
********************************************************************************
*  函数名称: ShellHelp
*
*  功能描述: 向串口打印数据
*
*  输入参数: 无
*
*  输出参数: 无
*
*  返 回 值: 无
*
********************************************************************************
*/
u32 ShellHelp(COMX *com, u16 argc, char *argv[])
{
    u32 *p;
    p = (u32 *)FLASH_SOFT_VER_ADDR;
    
    ShellPrintf(com, "\r\nooooooooooooooooooooooooooooooooooooooooooo\r\n");
    ShellPrintf(com, "o DeviceType:        E7759A\r\n");
    ShellPrintf(com, "o SoftWare Version : V%02x.%02x.%02x.%02x\r\n", (u8)((*p) >> 24), (u8)((*p) >> 16), (u8)((*p) >> 8), (u8)((*p) >> 0));
    ShellPrintf(com, "o SoftWare BuidTime: %s %s\r\n", __DATE__, __TIME__);
    ShellPrintf(com, "o Top:               %dhour, %ds\r\n", sys_hour_tick(), sys_msec_tick()/1000);
    ShellPrintf(com, "ooooooooooooooooooooooooooooooooooooooooooo\r\n");
 
    return 1;
}

/*
********************************************************************************
*  函数名称: ShellHelp
*
*  功能描述: 向串口打印数据
*
*  输入参数: 无
*
*  输出参数: 无
*
*  返 回 值: 无
*
********************************************************************************
*/
u32 ShellUpdate(COMX *com, u16 argc, char *argv[])
{
    SysSoftRst();
    return 1;
}


/*
********************************************************************************
*  函数名称: ShellRtu
*
*  功能描述: 终端控制和工作模式设置
*
*  输入参数: 无
*
*  输出参数: 无
*
*  返 回 值: 无
*
********************************************************************************
*/
u32 ShellRtu(COMX *com, u16 argc, char *argv[])
{
	switch(argc)
	{
	case 1:
		if(0 == strcasecmp(argv[0], "RESET"))
		{
			SysSoftRst();
		}
		else if(0 == strcasecmp(argv[0], "MODE"))
		{
			if(DebugMode == DEBUG_MODE)
			{
				ShellPrintf(com, "> RTU MODE DEBUG\r\n");
			}
			else
			{
				ShellPrintf(com, "> RTU MODE RELEASE\r\n");
			}
		}
		else
		{
			return 0;
		}
		break;
	case 2:
		if(0 == strcasecmp(argv[0], "MODE"))
		{
			// 设置终端为caster或client工作模式
			if(0 == strcasecmp(argv[1], "DEBUG"))
			{
				DebugMode = DEBUG_MODE;
				ShellPrintf(com, "> RTU MODE DEBUG OK\r\n");
			}
			else if(0 == strcasecmp(argv[1], "RELEASE"))
			{
				DebugMode = RELEASE_MODE;
				ShellPrintf(com, "> RTU MODE RELEASE OK\r\n");
			}
			else
			{
				return 0;
			}
		}
		else
		{
			return 0;
		}
		break;
	default:
		return 0;
	}

	return 1;
}

/*
********************************************************************************
*  命令行解析数据结构体
********************************************************************************
*/
const CMD_STRUC CMD_INNER[] =
{
    {"HELP"      ,  ShellHelp      },
    {"*#HZSZ"    ,  ShellUpdate    },
    {"RTU"       ,  ShellRtu       },
    {NULL        ,  NULL           }
};

/*
********************************************************************************
*  函数名称: ParseCmd
*
*  功能描述: 解析命令行参数
*
*  输入参数: cmdline 命令行参数指针
*            cmdlen  命令行参数长度
*
*  输出参数: 无
*
*  返 回 值: 0 能够解析 1 无法解析
*
********************************************************************************
*/
static s16 ParseCmd(char *cmdline, s16 cmdlen, COMX *com)
{
    s16 argc, i, state;
    char *argv[MAX_ARGS];
    s16 len1, len2;
    u32 res;
    

    // 数据长度为0，或者命令行参数指针为空则直接退出
    if(cmdlen <= 0 || cmdline == NULL)
    {
        return 0;
    }

    // 命令行字符长度为0则直接返回
    if(strlen((const char *)cmdline) == 0)
    {
        return 0;
    }

    /* convert all tabs into single spaces */
    for(i = 0; i < cmdlen && cmdline[i] != '\0'; i++)
    {
        if(cmdline[i] == '\t')
        {
            cmdline[i] = ' ';
        }
    }

    for(i = 0; i < sizeof(argv) / sizeof(argv[0]); i++)
    {
        argv[i] = NULL;
    }
    /* now find all words on the command line */
    state = STATE_SPACE;
    for(argc = 0, i = 0; i < cmdlen && cmdline[i] != '\0' && argc < MAX_ARGS; i++)
    {
        if(state == STATE_SPACE)
        {
            if(cmdline[i] != ' ')
            {
                argv[argc] = cmdline + i;       //将argv[i]指向c
                argc++;
                state = STATE_CHAR;
            }
        }
        else
        {
            if(cmdline[i] == ' ')
            {
                cmdline[i] = '\0';
                state = STATE_SPACE;
            }
        }
    }

    /* only whitespace */
    if(argc == 0)
    {
        return 0;
    }
        
    // 执行命令
    for(res = 0, i = 0; CMD_INNER[i].cmd != NULL; i++)
    {
        len1 = strlen((const char *)CMD_INNER[i].cmd);
        len2 = strlen((const char *)argv[0]);
        if (len1 != len2)
        {
            continue;
        }
        if(strcasecmp((char *)CMD_INNER[i].cmd,(const char *)argv[0]) == 0)
        {
            argc --;  // Add by Walter 20080825  
            if(CMD_INNER[i].proc != NULL)
            {
                res = CMD_INNER[i].proc(com, argc, &argv[1]);
            }

            break;
        }
    }

    // 返回0表示命令或命令格式不被支持
    if(res == 0)
    {
        ShellPrintf(com, "\r\n> MESSAGE IS NOT SUPPORTED\r\n");
    }
    return 0;
}

/*
********************************************************************************
*  函数名称: ShellMain
*
*  功能描述: shell命令解析函数
*
*  输入参数: ch 输入字符
*
*  输出参数: 无
*
*  返 回 值: 0 能够解析 1 当前字节无法解析
*
********************************************************************************
*/
u8 ShellMain(COMX *com, u8 ch)
{
    // 判断当前字符是否能够解析
    if((ch >= ASCII_20 && ch <= ASCII_7E)
        || (ch == KEY_BS)
        || (ch == KEY_CR)
        || (ch == KEY_LF)
        || (ch == KEY_ESC))
    {
    }
    else
    {
        return 1;
    }

    
    if(ch == KEY_BS)
    {
        // 退格键将删除一个字符
        ChNum -= ChNum ? 1 : 0;
    }
    else if((ch == KEY_CR) || (ch == KEY_LF))
    {
        // 回车换行时命令结束，开始转换
        CmdChar[ChNum] = 0;

        ParseCmd(CmdChar, ChNum, com);
        ChNum = 0;
    }
    else if(ChNum < MAX_CMD_LEN - 1)
    {
        // 其余字符进行保存
        CmdChar[ChNum++] = ch;
    }
    
    return 0;
}

/*
********************************************************************************
*  函数名称: ShellPrintf
*
*  功能描述: 重新定义fputc
*
*  输入参数: ch 输入字符
*
*  输出参数: 无
*
*  返 回 值: 0 能够解析 1 当前字节无法解析
*
********************************************************************************
*/
char  l_print_buffer[0x100];

void uartputc(char c, APPLIB_PRINT_ST *p)
{
    ComxPutChar((COMX *)p->s, c);
}

void ShellPrintf (COMX * com, const char *fmt, ...)
{
#if 0
#ifdef UART_USEOS
    u8 err;
#endif

    va_list args;
    APPLIB_PRINT_ST p;
    
    p.outc = uartputc;
    p.s    = (char*)com;

#ifdef UART_USEOS
    OSSemPend(com->pWrBufSem, 0, &err);
#endif
    
    va_start(args, fmt);
    AppLib_vprintf(fmt, args, (APPLIB_PRINT_ST *)&p);
    va_end(args);

#ifdef UART_USEOS
    OSSemPost(com->pWrBufSem);
#endif

#else
    va_list args;
    
    va_start(args, fmt);
    vsnprintf(l_print_buffer, 0x100, fmt, args);
    va_end(args);
    
    ComxPutStr(com, l_print_buffer);
#endif  
}

/*
********************************************************************************
*  函数名称: Shell_strtoul
*
*  功能描述: 向串口打印数据
*
*  输入参数: 无
*
*  输出参数: 无
*
*  返 回 值: 无
*
********************************************************************************
*/
u32 Shell_strtoul(char * pbuf, u32 maxlen, u8 base, char **pend)
{
    u32 tmp, i;
    u8  head;
    
    // 参数检查
    if(maxlen == 0 || pbuf == NULL)
    {
        return 0;
    }

    // 只转换10和16进制数据
    if(base != 10 && base != 16)
    {
        base = 10;
    }

    // 开始转换
    tmp  = 0;
    head = 0;
    for(i = 0; i < maxlen && *pbuf != '\0'; pbuf++)
    {
        if(base == 10)
        {
            // 从头找到数字为止
            if(*pbuf < '0' || *pbuf > '9')
            {
                // 已经找到一个数字后，出现一个非数字字符
                if(head == 1)
                {
                    break;
                }
                continue;
            }
            // 找到至少一个数字字符
            head = 1;

            // 不关心溢出，只关心找到最大长度的数字
            tmp = tmp * 10 + (*pbuf - '0');
            i++;
        }
        else
        {
            // 从头找到数字为止
            if(*pbuf >= '0' && *pbuf <= '9')
            {
                tmp = tmp << 4;
                tmp = tmp + (*pbuf - '0'); 
                i++;
                head = 1;
            }
            else if(*pbuf >= 'a' && *pbuf <= 'f')
            {
                tmp = tmp << 4; 
                tmp = tmp + (*pbuf - 'a' + 0x0A);
                i++;
                head = 1;
            }
            else if(*pbuf >= 'A' && *pbuf <= 'F')
            {
                tmp = tmp << 4; 
                tmp = tmp + (*pbuf - 'A' + 0x0A);
                i++;
                head = 1;
            }
            else
            {
                // 已经找到一个数字后，出现一个非数字字符
                if(head == 1)
                {
                    break;
                }
                continue;
            }
        }
    }

    // 返回当前指针位置
    if(pend != NULL)
    {
        *pend = pbuf;
    }

    return tmp;
    
}



