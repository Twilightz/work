/*
********************************************************************************
*  Copyright (C), 2009-2012, 合众思壮西安研发中心
*
*  项目名称：E6202
*  
*  文件名称: Public.c
*
*  文件描述：通用模块源文件
*             
*             
*  创 建 者: 皇海明
*
*  创建日期：2013-04-11 
*
*  版 本 号：V1.0
*
*  修改记录： 
*             
*      1. 日    期： 
*         修 改 人： 
*         所作修改： 
*      2. ...
********************************************************************************
*/

#define PUBLIC_GLB
#include "Public.h"
#include "shell.h"




/*
********************************************************************************                                                                  
*  内部函数声明                                                                                                        
********************************************************************************
*/



/*
********************************************************************************                                                                 
*  内部变量定义                                                                                                         
********************************************************************************
*/






/*
********************************************************************************
*  函数名称: FloatToChars
*
*  功能描述: xxxx
*
*  输入参数: 无
*
*  输出参数: 无
*
*  返 回 值: 无
*
********************************************************************************
*/
void FloatToChars(u8 *pdata, float f4)
{
	UNIONFLOAT temp;
	
	temp.f4 = f4;
	pdata[0] = temp.a[3];
	pdata[1] = temp.a[2];
	pdata[2] = temp.a[1];
	pdata[3] = temp.a[0];
}

/*
********************************************************************************
*  函数名称: CharsToFloat
*
*  功能描述: xxxx
*
*  输入参数: 无
*
*  输出参数: 无
*
*  返 回 值: 无
*
********************************************************************************
*/
float CharsToFloat(u8 *pdata)
{
	UNIONFLOAT temp;
	
	temp.f4 = 0;
	temp.a[3] = pdata[0];
	temp.a[2] = pdata[1];
	temp.a[1] = pdata[2];
	temp.a[0] = pdata[3];

	return temp.f4;
}

/*
********************************************************************************
*  函数名称: DoubleToChars
*
*  功能描述: xxxx
*
*  输入参数: 无
*
*  输出参数: 无
*
*  返 回 值: 无
*
********************************************************************************
*/
void DoubleToChars(u8 *pdata, double f8)
{
	UNIONDOUBLE temp;
	
	temp.f8 = f8;
	pdata[0] = temp.a[7];
	pdata[1] = temp.a[6];
	pdata[2] = temp.a[5];
	pdata[3] = temp.a[4];
	pdata[4] = temp.a[3];
	pdata[5] = temp.a[2];
	pdata[6] = temp.a[1];
	pdata[7] = temp.a[0];
}

/*
********************************************************************************
*  函数名称: CharsToDouble
*
*  功能描述: xxxx
*
*  输入参数: 无
*
*  输出参数: 无
*
*  返 回 值: 无
*
********************************************************************************
*/
double CharsToDouble(u8 *pdata)
{
	UNIONDOUBLE temp;
	
	temp.f8 = 0;
	temp.a[7] = pdata[0];
	temp.a[6] = pdata[1];
	temp.a[5] = pdata[2];
	temp.a[4] = pdata[3];
	temp.a[3] = pdata[4];
	temp.a[2] = pdata[5];
	temp.a[1] = pdata[6];
	temp.a[0] = pdata[7];

	return temp.f8;
}

void reverse(char *str, int32_t n) {
    int32_t p = 0, q = 0;
    char t;
	
	  p = 0;
	  q = n-1;
	
	  if(str==NULL)
		{
			return;
		}
    while (p < q) {
        t = str[p];
        str[p] = str[q];
        str[q] = t;
        p++;
        q--;
    }
}
/*
********************************************************************************
*  函数名称: f2s
*
*  功能描述:将浮点数转换为字符串
*
*  输入参数: float f, char* str
*
*  输出参数: 无
*
*  返 回 值: 无
*
********************************************************************************
*/
void f2s(float f, char* str) {
    int32_t i = 0;
    int32_t n = 0;
	  int32_t t = 0;
	
	  i = 0;
	  n = 0;
	  n = (int32_t)f;
	
	 
	  if(str==NULL)
		{
			return;
		}
    f -= n;
    while (n > 0) {
        str[i++] = n % 10 + '0';
        n /= 10;
    }
		//
    reverse(str, i);
		
    str[i++] = '.';
    n = 0;


    while (f > 0 && n < 4) {  //n=4
        t = (int32_t)(f * 10);
        str[i++] = t + '0';
        f = f * 10 - t;
        n++;
    }

    str[i] = '\0';
		
}

/*
********************************************************************************
*  函数名称: c16toa
*
*  功能描述: 将length拆分两个字节
*            
*
*  输入参数: length，c
*
*  输出参数: 无
*
*  返 回 值: 无
*
********************************************************************************
*/

void c16toa(u16 *length, u8* c)
{
	  if(length==NULL&&c==NULL)
		{
			return;
		}
    c[0] = (*length >> 8) & 0xff;
    c[1] =  *length & 0xff;
}

/*
********************************************************************************
*  函数名称: ato16
*
*  功能描述: 将两个字节组成一个16位的数据
*            
*
*  输入参数: data，length
*
*  输出参数: 无
*
*  返 回 值: 无
*
********************************************************************************
*/
void ato16(u8* data,u16* length)
{
	 if(data==NULL&&length==NULL)
	 {
		 return;
	 }
	 *length = (u16) ((data[0]<<8) | (data[1]));
}

void ato32(u8* data, u32* u32)
{
	  if(data==NULL&&u32==NULL)
		{
			return;
		}
    *u32 = (data[0] << 24) | (data[1] << 16) | (data[2] << 8) | data[3];
}

void c32toa(u32* data, u8* c)
{
	  if(data==NULL&&c==NULL)
		{
			return;
		}
    c[0] = (*data >> 24) & 0xff;
    c[1] = (*data >> 16) & 0xff;
    c[2] = (*data >>  8) & 0xff;
    c[3] =  *data & 0xff;
}
void CalculateChecksum(u8 *data,int16_t length,u8 *cha,u8 *chb)
{
	  u32 i;
		// 计算校验值
		*cha = 0;
		*chb = 0;
	  if(data==NULL&&cha==NULL&&chb==NULL&&length<0)
		{
			return;
		}
		for (i = 0; i < length; i++)
		{
			*cha = *cha + data[i];
			*chb = *chb + *cha;
		}
}
