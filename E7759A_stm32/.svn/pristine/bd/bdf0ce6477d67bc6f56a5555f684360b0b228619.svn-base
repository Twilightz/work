/*
********************************************************************************
*  Copyright (C), 2009-2013, 合众思壮西安研发中心
*
*  项目名称：xxxx
*  
*  文件名称: xxxx.c
*
*  文件描述：xxxx
*             
*             
*  创 建 者: 皇海明
*
*  创建日期：2013-03-18 
*
*  版 本 号：V1.0
*
*  修改记录： 
*             
*      1. 日    期： 
*         修 改 人： 
*         所作修改： 
*      2. ...
********************************************************************************
*/
#include "Timer.h"
#include "Uart.h"
#include "main.h"
#include "Exti.h"
#include "shell.h"

extern volatile u8 acconoff;

u32 secondcount = 0;
extern u8 accoffsecond;
extern u8 turnoncmd[12];
extern void senddatapacket(COMX * pcom,u8* data,u32 length);
/*
********************************************************************************
*  函数名称: TIMER_Configuration
*
*  功能描述: 定时器初始化
*
*  输入参数: 无
*
*  输出参数: 无
*
*  返 回 值: 无
*
********************************************************************************
*/
void TIMER_Configuration(void)
{
    TIM_TimeBaseInitTypeDef TIM_TimeBaseStructure; 
    NVIC_InitTypeDef NVIC_InitStructure;

    RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM2 , ENABLE); /* 时钟使能*/
    TIM_DeInit(TIM2); /*重新将Timer设置为缺省值*/
    TIM_TimeBaseStructure.TIM_Period=20000-1; /*自动重装载寄存器周期的值(计数  值) 1s*/
    TIM_TimeBaseStructure.TIM_Prescaler= (uint16_t) (SystemCoreClock / 20000) - 1;  /* 时钟预分频数 72M/20000 -1 */  
 
    TIM_TimeBaseStructure.TIM_ClockDivision=TIM_CKD_DIV1;  /* 采样分频 */  
    TIM_TimeBaseStructure.TIM_CounterMode=TIM_CounterMode_Up; /* 向上计数模式 */  
    TIM_TimeBaseInit(TIM2, &TIM_TimeBaseStructure);  
    TIM_ClearFlag(TIM2, TIM_FLAG_Update);  /* 清除溢出中断标志 */    
	
    TIM_ITConfig(TIM2,TIM_IT_Update,ENABLE);  
    TIM_Cmd(TIM2, ENABLE);

    NVIC_PriorityGroupConfig(NVIC_PriorityGroup_4);  
    NVIC_InitStructure.NVIC_IRQChannel = TIM2_IRQn;            
    NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0x0F;  
    NVIC_InitStructure.NVIC_IRQChannelSubPriority = 1;          
    NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;  
    NVIC_Init(&NVIC_InitStructure);  
}
#if 1
void TIM2_IRQHandler(void)  
{
    static u16 acc_off_cnt=0;
	  static u16 sendcount=0;

    if (TIM_GetITStatus(TIM2, TIM_IT_Update) != RESET) //检查指定的TIM中断发生与否:TIM中断源
    {
		if(acconoff==ACC_ON){
	 	    acc_off_cnt=0;
	 	    GPIO_SetBits(GPIOA, GPIO_Pin_11);
		    //RTU_DEBUG("acc on!!!\r\n");
	 	}
	  else if(acconoff==ACC_OFF){
	 	    acc_off_cnt++;
	 	}
#if 0
	 if(acc_off_cnt>THRESHOLD_CNT){
	 	acc_off_cnt=0;
		if(is_accoff_ack==TRUE)
		{
			GPIO_ResetBits(GPIOA, GPIO_Pin_11);
			//RTU_DEBUG("acc1 off!!!\r\n");
		}
	 }
#endif
    }
    TIM_ClearITPendingBit(TIM2, TIM_IT_Update  );  //清除TIMx的中断待处理位:TIM中断源
}

#else
void TIM2_IRQHandler(void)  
{
    u16 PeriodNumber=power_off_time;
    static u16 acc_on_cnt=0;
    static u16 acc_off_cnt=0;
    if (TIM_GetITStatus(TIM2, TIM_IT_Update) != RESET) //检查指定的TIM中断发生与否:TIM 中断源  
    {
		/*if(Counter >= PeriodNumber)
      {
        if(GPIO_ReadInputDataBit(GPIOA, GPIO_Pin_0)){
					Counter=0;
					GPIO_SetBits(GPIOA, GPIO_Pin_11);				
				}
      }
	  Counter++;
	 */
	 //RTU_DEBUG("TIM2_IRQHandler\r\n");	
	 ADC1_SAMPLING();
	 if(batt_lvl_in_milli_volts>THRESHOLD){
	 	acc_on_cnt++;
		acc_off_cnt=0;
	 }
	 else{
	 	acc_off_cnt++;
		acc_on_cnt=0;
	 }
	 
	 if(acc_off_cnt>THRESHOLD_CNT){
	 	acc_off_cnt=0;
		acconoff=ACC_OFF;
	 }
	 if(acc_on_cnt>THRESHOLD_CNT){
	 	acc_on_cnt=0;
		acconoff=ACC_ON;
	 }
	 
	 if(acconoff==ACC_ON){
	 	if(0==GPIO_ReadOutputDataBit(GPIOA, GPIO_Pin_11)){
		GPIO_SetBits(GPIOA, GPIO_Pin_11);
		//RTU_DEBUG("TIM2_IRQHandler:acc on\r\n");
	 	}
	 }
	 else if(acconoff==ACC_OFF){
	 	 GPIO_ResetBits(GPIOA, GPIO_Pin_11);
		 //RTU_DEBUG("TIM2_IRQHandler:acc off\r\n");
	 }
   }
   TIM_ClearITPendingBit(TIM2, TIM_IT_Update  );  //清除TIMx的中断待处理位:TIM 中断源    
}
#endif

void TIMER3_Configuration(void)
{
    TIM_TimeBaseInitTypeDef TIM_TimeBaseStructure; 
    NVIC_InitTypeDef NVIC_InitStructure;

    RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM3 , ENABLE); /* 时钟使能*/
	
    TIM_DeInit(TIM3); /*重新将Timer设置为缺省值*/
	
    TIM_TimeBaseStructure.TIM_Period=20000-1; /*自动重装载寄存器周期的值(计数  值) 1s*/
    TIM_TimeBaseStructure.TIM_Prescaler= (uint16_t) (SystemCoreClock / 20000) - 1;  /* 时钟预分频数 72M/20000 -1 */  
 
    TIM_TimeBaseStructure.TIM_ClockDivision=TIM_CKD_DIV1;  /* 采样分频 */  
    TIM_TimeBaseStructure.TIM_CounterMode=TIM_CounterMode_Up; /* 向上计数模式 */  
    TIM_TimeBaseInit(TIM3, &TIM_TimeBaseStructure);  
	
    TIM_ClearFlag(TIM3, TIM_FLAG_Update);  /* 清除溢出中断标志 */    
	
    TIM_ITConfig(TIM3,TIM_IT_Update,ENABLE);  
  

    NVIC_PriorityGroupConfig(NVIC_PriorityGroup_4);  
    NVIC_InitStructure.NVIC_IRQChannel = TIM3_IRQn;            
    NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0;  
    NVIC_InitStructure.NVIC_IRQChannelSubPriority = 3;          
    NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;  
    NVIC_Init(&NVIC_InitStructure);  
}
void TIMER4_Configuration(void)
{
    TIM_TimeBaseInitTypeDef TIM_TimeBaseStructure; 
    NVIC_InitTypeDef NVIC_InitStructure;

    RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM4 , ENABLE); /* 时钟使能*/
	
    TIM_DeInit(TIM4); /*重新将Timer设置为缺省值*/
	
    TIM_TimeBaseStructure.TIM_Period=20000-1; /*自动重装载寄存器周期的值(计数  值) 1s*/
    TIM_TimeBaseStructure.TIM_Prescaler= (uint16_t) (SystemCoreClock / 20000) - 1;  /* 时钟预分频数 72M/20000 -1 */  
 
    TIM_TimeBaseStructure.TIM_ClockDivision=TIM_CKD_DIV1;  /* 采样分频 */  
    TIM_TimeBaseStructure.TIM_CounterMode=TIM_CounterMode_Up; /* 向上计数模式 */  
    TIM_TimeBaseInit(TIM4, &TIM_TimeBaseStructure);  
	
    TIM_ClearFlag(TIM4, TIM_FLAG_Update);  /* 清除溢出中断标志 */    
	
    TIM_ITConfig(TIM4,TIM_IT_Update,ENABLE);  
  

    NVIC_PriorityGroupConfig(NVIC_PriorityGroup_4);  
    NVIC_InitStructure.NVIC_IRQChannel = TIM4_IRQn;            
    NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0;  
    NVIC_InitStructure.NVIC_IRQChannelSubPriority = 3;          
    NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;  
    NVIC_Init(&NVIC_InitStructure);  
}
void TIMER5_Configuration(void)
{
    TIM_TimeBaseInitTypeDef TIM_TimeBaseStructure; 
    NVIC_InitTypeDef NVIC_InitStructure;

    RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM5 , ENABLE); /* 时钟使能*/
	
    TIM_DeInit(TIM5); /*重新将Timer设置为缺省值*/
	
    TIM_TimeBaseStructure.TIM_Period=20000-1; /*自动重装载寄存器周期的值(计数  值) 1s*/
    TIM_TimeBaseStructure.TIM_Prescaler= (uint16_t) (SystemCoreClock / 20000) - 1;  /* 时钟预分频数 72M/20000 -1 */  
 
    TIM_TimeBaseStructure.TIM_ClockDivision=TIM_CKD_DIV1;  /* 采样分频 */  
    TIM_TimeBaseStructure.TIM_CounterMode=TIM_CounterMode_Up; /* 向上计数模式 */  
    TIM_TimeBaseInit(TIM5, &TIM_TimeBaseStructure);  
	
    TIM_ClearFlag(TIM5, TIM_FLAG_Update);  /* 清除溢出中断标志 */    
	
    TIM_ITConfig(TIM5,TIM_IT_Update,ENABLE);  
  

    NVIC_PriorityGroupConfig(NVIC_PriorityGroup_4);  
    NVIC_InitStructure.NVIC_IRQChannel = TIM5_IRQn;            
    NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0;  
    NVIC_InitStructure.NVIC_IRQChannelSubPriority = 3;          
    NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;  
    NVIC_Init(&NVIC_InitStructure);  
}

void TIM3_IRQHandler(void)   
{
	if (TIM_GetITStatus(TIM3, TIM_IT_Update) != RESET)  
		{
			//RTU_DEBUG("TIM3_IRQHandler\r\n");	
			accoffsecond++;
			//若熄火后突然点火
			if(acconoff==ACC_ON)
			{
				//RTU_DEBUG("TIM3_IRQHandler  ACC_ON\r\n");	
				senddatapacket(&COM3,turnoncmd,FIXED_LENGTH+1+CHECKSUM);
			  TIM_Cmd(TIM3, DISABLE);
			
			}
			TIM_ClearITPendingBit(TIM3, TIM_IT_Update  );   

		}
}  
void TIM4_IRQHandler(void)   
{
	if (TIM_GetITStatus(TIM4, TIM_IT_Update) != RESET)  
		{
			//RTU_DEBUG("TIM4_IRQHandler\r\n");
      secondcount++;			
			//若熄火后突然点火
			if(acconoff==ACC_ON)
			{
				//RTU_DEBUG("TIM4_IRQHandler  ACC_ON\r\n");	
				secondcount=0;
				TIM_Cmd(TIM4, DISABLE);
				senddatapacket(&COM3,turnoncmd,FIXED_LENGTH+1+CHECKSUM);
			}
			TIM_ClearITPendingBit(TIM4, TIM_IT_Update);   
		}
		//若10分钟后,未点火则强制关机。
		if(secondcount==600)
		{
			if(acconoff==ACC_OFF)
			{
				GPIO_ResetBits(GPIOA, GPIO_Pin_11);
			}
		}
}  
void TIM5_IRQHandler(void)   
{
	if (TIM_GetITStatus(TIM5, TIM_IT_Update) != RESET)  
		{
			//RTU_DEBUG("TIM5_IRQHandler\r\n");	
			TIM_Cmd(TIM5, DISABLE);
			__set_FAULTMASK(1);
		  NVIC_SystemReset();
			TIM_ClearITPendingBit(TIM5, TIM_IT_Update  );   

		}
} 







