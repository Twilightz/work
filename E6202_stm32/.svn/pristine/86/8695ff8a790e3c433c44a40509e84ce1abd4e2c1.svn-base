/*
********************************************************************************
*  Copyright (C), 2009-2012, 合众思壮深圳研发中心
*
*  项目名称：E9624
*  
*  文件名称: Main.c
*
*  文件描述：E9624主函数main
*             
*             
*  创 建 者: zengxf
*
*  创建日期：2015-09-18 
*
*  版 本 号：V1.0
*
*  修改记录： 
*             
*      1. 日    期： 
*         修 改 人： 
*         所作修改： 
*      2. ...
********************************************************************************
*/

#define MAIN_GLOBALS
#include "main.h"
#include "CipherFunc.h"
#include "SysTick.h"
#include "Shell.h"
#include "bsp.h"





/*
********************************************************************************                                                                  
*  内部函数声明                                                                                                        
********************************************************************************
*/
void UserCmd(void);
void CanToUtcp(u8 channel, CANX * pcan, COMX * pcom);
void WinceCmdInit(void);
u8 WinceCmdEntry(u8 dat, COMX * pcom);

/*
********************************************************************************                                                                  
*  外部函数声明                                                                                                        
********************************************************************************
*/
extern void TIM2_IRQHandler(void); 
/*
********************************************************************************                                                                 
*  内部变量定义                                                                                                         
********************************************************************************
*/
enum {ACC_DEFAULT=0, ACC_ON, ACC_OFF};
volatile u8 acconoff=ACC_DEFAULT;
u16 Counter=0;
u16 ad_value;
u8 AsciiBuff[5];
#define VOLTAGE_AVG_NUM 6
static uint32_t battery_voltage_arrary[VOLTAGE_AVG_NUM]={0};
static uint8_t battery_voltage_arrary_index = 0;
u16 batt_lvl_in_milli_volts; 
#define THRESHOLD   500  //500mv
#define THRESHOLD_CNT  10
#define power_off_time     30
#define ADC_RESULT_IN_MILLI_VOLTS(ADC_VALUE)\
          ((((ADC_VALUE) * 439)  * 2 )/ 1024)
/*
********************************************************************************
*  函数名称: GPIO_Configuration
*
*  功能描述: gpio 初始化
*
*  输入参数: 无
*
*  输出参数: 无
*
*  返 回 值: 无
*
********************************************************************************
*/
void GPIO_Configuration(void) 
{   
    GPIO_InitTypeDef GPIO_InitStructure;
   
    RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA,ENABLE);

    GPIO_InitStructure.GPIO_Pin = GPIO_Pin_0;  
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;  
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AIN;//GPIO_Mode_IN_FLOATING;   
    GPIO_Init(GPIOA, &GPIO_InitStructure);
	
    GPIO_InitStructure.GPIO_Pin = GPIO_Pin_11;  
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;  
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;   
    GPIO_Init(GPIOA, &GPIO_InitStructure);    

    GPIO_InitStructure.GPIO_Pin = GPIO_Pin_6;  
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;  
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;   
    GPIO_Init(GPIOC, &GPIO_InitStructure);

    GPIO_InitStructure.GPIO_Pin = GPIO_Pin_7;  
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;  
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;   
    GPIO_Init(GPIOC, &GPIO_InitStructure);
    //can_pwron
    GPIO_SetBits(GPIOC, GPIO_Pin_7);
    //uart_en
    GPIO_SetBits(GPIOC, GPIO_Pin_6);

    //if(GPIO_ReadInputDataBit(GPIOA, GPIO_Pin_0)){
		GPIO_SetBits(GPIOA, GPIO_Pin_11);		
		RTU_DEBUG("GPIOA_0 HIGH\r\n");
    //   }
}

/*
********************************************************************************
*  函数名称: EXTI_Configuration
*
*  功能描述: 中断初始化
*
*  输入参数: 无
*
*  输出参数: 无
*
*  返 回 值: 无
*
********************************************************************************
*/
void EXTI0_Configuration(void)
{
    EXTI_InitTypeDef EXTI_InitStructure;  
    NVIC_InitTypeDef NVIC_InitStructure;
   
    RCC_APB2PeriphClockCmd(RCC_APB2Periph_AFIO, ENABLE);   
    GPIO_EXTILineConfig(GPIO_PortSourceGPIOA, GPIO_PinSource0);  
    EXTI_ClearITPendingBit(EXTI_Line0);
    EXTI_InitStructure.EXTI_Mode = EXTI_Mode_Interrupt;  
    EXTI_InitStructure.EXTI_Trigger = EXTI_Trigger_Rising_Falling;  
    EXTI_InitStructure.EXTI_Line = EXTI_Line0;  
    EXTI_InitStructure.EXTI_LineCmd = ENABLE;  
    EXTI_Init(&EXTI_InitStructure); 

    NVIC_PriorityGroupConfig(NVIC_PriorityGroup_4);
    NVIC_InitStructure.NVIC_IRQChannel =  EXTI0_IRQn;
    NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0x0A;  
    NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;     
    NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;  
    NVIC_Init(&NVIC_InitStructure);
}
#if 0
void EXTI0_IRQHandler(void)
{
    u8 rdata;
    RTU_DEBUG("EXTI0_IRQHandler\r\n");
    if(EXTI_GetITStatus(EXTI_Line0) != RESET)
    {
      EXTI_ClearITPendingBit(EXTI_Line0); /* 清除中断标志位 */
      //do something
      rdata=GPIO_ReadInputDataBit(GPIOA, GPIO_Pin_0);
      if(1==rdata){
	  	acconoff=ACC_ON;	  	
		RTU_DEBUG("EXTI0_IRQHandler:acc on\r\n");
      	}
	else{
		acconoff=ACC_OFF;
		RTU_DEBUG("EXTI0_IRQHandler:acc off\r\n");
	}
    }
}
#endif

/*
********************************************************************************
*  函数名称: ADC_Configuration
*
*  功能描述:ADC 初始化
*
*  输入参数: 无
*
*  输出参数: 无
*
*  返 回 值: 无
*
********************************************************************************
*/
void ADC_Configuration(void)
{
    ADC_InitTypeDef ADC_InitStructure; 
    RCC_APB2PeriphClockCmd(RCC_APB2Periph_ADC1, ENABLE);
    RCC_ADCCLKConfig(RCC_PCLK2_Div6); //ADC 时钟12M hz
    ADC_InitStructure.ADC_Mode = ADC_Mode_Independent; 
    ADC_InitStructure.ADC_ScanConvMode =DISABLE;//单通道扫描
    ADC_InitStructure.ADC_ContinuousConvMode = ENABLE;//连续转换
    ADC_InitStructure.ADC_ExternalTrigConv = ADC_ExternalTrigConv_None;//2//不采用外部触发转换
    ADC_InitStructure.ADC_DataAlign = ADC_DataAlign_Right; //输出的数据右对齐
    ADC_InitStructure.ADC_NbrOfChannel=1;//只有一个通道需要采样
    ADC_Init(ADC1, &ADC_InitStructure);
    ADC_RegularChannelConfig(ADC1, ADC_Channel_0,1,ADC_SampleTime_55Cycles5 );//设置采样通道、次序和采样时间
    ADC_Cmd(ADC1, ENABLE);//使能ADC
    ADC_ResetCalibration(ADC1); //重置校准
    while(ADC_GetResetCalibrationStatus(ADC1));//等待重置校准完成
    ADC_StartCalibration(ADC1);//启动校准
    while(ADC_GetCalibrationStatus(ADC1)); //等待校准完成
    ADC_SoftwareStartConvCmd(ADC1, ENABLE); //开始启动软件转换
}
void ADC1_SAMPLING(void)
{
    u16 rdata;
    int i,j;
    while(ADC_GetFlagStatus(ADC1, ADC_FLAG_EOC)==RESET);//通过判断EOC是否发送完
    ADC_ClearITPendingBit(ADC1, ADC_FLAG_EOC);//清除转换标志位
    rdata=ADC_GetConversionValue(ADC1);
    batt_lvl_in_milli_volts=ADC_RESULT_IN_MILLI_VOLTS(rdata);
    if( battery_voltage_arrary[0] == 0 ){
		battery_voltage_arrary_index = 0;
		for( i = 0; i < VOLTAGE_AVG_NUM; i++ ){
			battery_voltage_arrary[i] = batt_lvl_in_milli_volts;
			}
    }else{
         battery_voltage_arrary[battery_voltage_arrary_index] = batt_lvl_in_milli_volts;
         battery_voltage_arrary_index = ( battery_voltage_arrary_index + 1 )%VOLTAGE_AVG_NUM;
         batt_lvl_in_milli_volts = 0;
         for( j = 0; j < VOLTAGE_AVG_NUM; j++ ){
               batt_lvl_in_milli_volts += battery_voltage_arrary[j];
         }
         batt_lvl_in_milli_volts /= VOLTAGE_AVG_NUM;
    }
    //RTU_DEBUG("ADC1_SAMPLING<%d>\r\n", batt_lvl_in_milli_volts);
}

/*
********************************************************************************
*  函数名称: TIMER_Configuration
*
*  功能描述: 定时器初始化
*
*  输入参数: 无
*
*  输出参数: 无
*
*  返 回 值: 无
*
********************************************************************************
*/
void TIMER_Configuration(void)
{
    TIM_TimeBaseInitTypeDef TIM_TimeBaseStructure; 
    NVIC_InitTypeDef NVIC_InitStructure;

    RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM2 , ENABLE); /* 时钟使能*/
    TIM_DeInit(TIM2); /*重新将Timer设置为缺省值*/
    TIM_TimeBaseStructure.TIM_Period=20000-1; /*自动重装载寄存器周期的值(计数  值) 1s*/
    TIM_TimeBaseStructure.TIM_Prescaler= (uint16_t) (SystemCoreClock / 20000) - 1;  /* 时钟预分频数 72M/20000 -1 */  
 
    TIM_TimeBaseStructure.TIM_ClockDivision=TIM_CKD_DIV1;  /* 采样分频 */  
    TIM_TimeBaseStructure.TIM_CounterMode=TIM_CounterMode_Up; /* 向上计数模式 */  
    TIM_TimeBaseInit(TIM2, &TIM_TimeBaseStructure);  
    TIM_ClearFlag(TIM2, TIM_FLAG_Update);  /* 清除溢出中断标志 */    
	
    TIM_ITConfig(TIM2,TIM_IT_Update,ENABLE);  
    TIM_Cmd(TIM2, ENABLE);

    NVIC_PriorityGroupConfig(NVIC_PriorityGroup_4);  
    NVIC_InitStructure.NVIC_IRQChannel = TIM2_IRQn;            
    NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0x0F;  
    NVIC_InitStructure.NVIC_IRQChannelSubPriority = 1;          
    NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;  
    NVIC_Init(&NVIC_InitStructure);  
}

void TIM2_IRQHandler(void)  
{
    u16 PeriodNumber=power_off_time;
    static u16 acc_on_cnt=0;
    static u16 acc_off_cnt=0;
    if (TIM_GetITStatus(TIM2, TIM_IT_Update) != RESET) //检查指定的TIM中断发生与否:TIM 中断源  
    {
	/*if (Counter >= PeriodNumber)
        {
             if(GPIO_ReadInputDataBit(GPIOA, GPIO_Pin_0)){
			 	Counter=0;
				GPIO_SetBits(GPIOA, GPIO_Pin_11);				
             	}
        }
	 Counter++;
	 */
	 //RTU_DEBUG("TIM2_IRQHandler\r\n");	
	 ADC1_SAMPLING();
	 if(batt_lvl_in_milli_volts>THRESHOLD){
	 	acc_on_cnt++;
		acc_off_cnt=0;
	 }
	 else{
	 	acc_off_cnt++;
		acc_on_cnt=0;
	 }
	 
	 if(acc_off_cnt>THRESHOLD_CNT){
	 	acc_off_cnt=0;
		acconoff=ACC_OFF;
	 }
	 if(acc_on_cnt>THRESHOLD_CNT){
	 	acc_on_cnt=0;
		acconoff=ACC_ON;
	 }
	 
	 if(acconoff==ACC_ON){
	 	    if(0==GPIO_ReadOutputDataBit(GPIOA, GPIO_Pin_11)){
				GPIO_SetBits(GPIOA, GPIO_Pin_11);
				RTU_DEBUG("TIM2_IRQHandler:acc on\r\n");
	 	    	}
	 	}
	 else if(acconoff==ACC_OFF){
	 	    GPIO_ResetBits(GPIOA, GPIO_Pin_11);
		    RTU_DEBUG("TIM2_IRQHandler:acc off\r\n");
	 	}
    }
    TIM_ClearITPendingBit(TIM2, TIM_IT_Update  );  //清除TIMx的中断待处理位:TIM 中断源    
}

/*
********************************************************************************
*  函数名称: main
*
*  功能描述: 主函数，应用程序入口
*
*  输入参数: 无
*
*  输出参数: 无
*
*  返 回 值: 无
*
********************************************************************************
*/
int main(void)
{
    u32 localtime;
    u8 tmp;

    BSP_Init();
    
    // GPIO初始化
    GpioInit(); 

    // shell初始化
    ShellInit();
	
	  // 硬件GPIO初始化
    GPIO_Configuration();

    //中断初始化
    //EXTI0_Configuration();
    
	  //ADC初始化
    ADC_Configuration();
    
		//定时器初始化
    TIMER_Configuration();
    //系统定时器初始化
    systick_init();

    Com3Init(CANCOM, 115200, COM_PARA_8N1);

    // 加密校验函数，JTAG调试时要将此函数屏蔽
#if VECTTAB_FLASH_OFFSET == 0x4000
    CmpCipher();
#endif
 
    CAN1Init(&Can1, CANX_BAUD_250K);
    CAN2Init(&Can2, CANX_BAUD_250K);

    WinceCmdInit();

    RTU_DEBUG("application start!\r\n");

    // 看门狗初始化
    //WdgStart(10);

    while(1)
    {
        localtime = systick_getcnt();
        
        // 用户输入命令解析
        while(ComxGetChar(SHELLCOM, &tmp))
        {
            ShellMain(SHELLCOM, tmp);
        }

        while(ComxGetChar(CANCOM, &tmp))
        {
            WinceCmdEntry(tmp, CANCOM);
        }
        
        CanToUtcp(1, &Can1, CANCOM);
        CanToUtcp(2, &Can2, CANCOM);
        
        if((localtime + 5) < systick_getcnt())
        {
            RTU_DEBUG("main loop ticks <%d>\r\n", systick_getcnt() - localtime);
        }
        
        //WdgTick();
    }
}

/*
********************************************************************************
*  函数名称: UserCmd
*
*  功能描述: 用户输入命令解析
*
*  输入参数: 无
*
*  输出参数: 无
*
*  返 回 值: 无
*
********************************************************************************
*/
void UserCmd(void)
{
    u8 tmp;
    
    while(ComxGetChar(SHELLCOM, &tmp))
    {
        ShellMain(SHELLCOM, tmp);
    }
}

/*
********************************************************************************
*  函数名称: WinceCmdInit
*
*  功能描述: 命令解析初始化
*            
*
*  输入参数: 无
*
*  输出参数: 无
*
*  返 回 值: 无
*
********************************************************************************
*/
void WinceCmdInit(void)
{
    WinceCmdDec.Len   = 0;
    WinceCmdDec.State = 0;
}

/*
********************************************************************************
*  函数名称: WinceCmdEntry
*
*  功能描述: 主CPU控制命令解析
*            
*
*  输入参数: dat   字节数据
*            pcom  串口
*
*  输出参数: 无
*
*  返 回 值: 无
*
********************************************************************************
*/
u8 WinceCmdEntry(u8 dat, COMX * pcom)
{
    u8 dle;
    u32 i, k;
    u8 rescmd[7] = {BINTRANS_DLE, BINTRANS_STX, 0x86, 0x86, 0x86, BINTRANS_DLE, BINTRANS_ETX};

    switch(WinceCmdDec.State)
    {
    case 0:
        if(WinceCmdDec.Len < 2)
        {
            WinceCmdDec.Dat[WinceCmdDec.Len] = dat;
            WinceCmdDec.Len++;
        }
        else
        {
            if(WinceCmdDec.Dat[0] == BINTRANS_DLE && WinceCmdDec.Dat[1] == BINTRANS_STX)
            {
                WinceCmdDec.Dat[2] = dat;
                WinceCmdDec.Len    = 3;
                WinceCmdDec.State  = 1;
            }
            else
            {
                WinceCmdDec.Dat[0] = WinceCmdDec.Dat[1];
                WinceCmdDec.Dat[1] = dat;
                WinceCmdDec.Len    = 2;
            }
        }
        break;
    case 1:
        WinceCmdDec.Dat[WinceCmdDec.Len++] = dat;

        // 最小长度 2字节头 + 2字节校验 + 2字节结尾
        if(WinceCmdDec.Len < 4)
        {
            break;
        }

        // 找结尾字节
        if(WinceCmdDec.Dat[WinceCmdDec.Len - 2] == BINTRANS_DLE && 
            WinceCmdDec.Dat[WinceCmdDec.Len - 1] == BINTRANS_ETX)
        {
            // 转义字节
            for(dle = 0, k = 0, i = 2; i < WinceCmdDec.Len - 2; i++)
            {
                if(WinceCmdDec.Dat[i] == BINTRANS_DLE)
                {
                    if(dle == 1)
                    {
                        dle = 0;
                        continue;
                    }
                    else
                    {
                        dle = 1;
                    }
                }
                else
                {
                    dle = 0;
                }
                
                WinceCmdDec.Esc[k++] = WinceCmdDec.Dat[i];
            }

            WinceCmdDec.Len = k;

            // 具体命令相应
            if(WinceCmdDec.Esc[0] == 0x85)
            {
                ComxPutData(pcom, rescmd, 7);
            }

            // 恢复初始解析状态
            WinceCmdDec.Len   = 0;
            WinceCmdDec.State = 0;
        }
        else if(WinceCmdDec.Dat[WinceCmdDec.Len - 2] == BINTRANS_DLE && 
            WinceCmdDec.Dat[WinceCmdDec.Len - 1] == BINTRANS_STX)
        {
            WinceCmdDec.Dat[0] = BINTRANS_DLE;
            WinceCmdDec.Dat[1] = BINTRANS_STX;
            WinceCmdDec.Len    = 2;
        }

        // 超出最大长度
        if(WinceCmdDec.Len >= BINTRANS_MAXLEN)
        {
            WinceCmdDec.Len   = 0;
            WinceCmdDec.State = 0;
        }
        break;
    default:
        WinceCmdDec.Len   = 0;
        WinceCmdDec.State = 0;
        break;
    }
    
    return 0;
}

/*
********************************************************************************
*  函数名称: CanToUtcp
*
*  功能描述: 将CAN总线数据直接打包成UTCP二进制数据传输协议发送。
*            
*
*  输入参数: 无
*
*  输出参数: 无
*
*  返 回 值: 无
*
********************************************************************************
*/
void CanToUtcp(u8 channel, CANX * pcan, COMX * pcom)
{
    u8 i, cha, chb, buf[20];
    CANQUEDATA data;

    if(channel != 1 && channel != 2)
    {
        return;
    }
    
    else if(pcan == NULL || pcom == NULL)
    {
        return;
    }
    
    while(CanReceive(pcan, &data))
    {
        buf[0] = channel;
        buf[1] = (u8)(data.Id >> 24);
        buf[2] = (u8)(data.Id >> 16);
        buf[3] = (u8)(data.Id >> 8);
        buf[4] = (u8)(data.Id >> 0);
        buf[5] = data.Dlc;
        for(i = 0; i < 8; i++)
        {
            buf[6 + i] = data.Data[i];
        }

        // 计算校验值
        cha = 0;
        chb = 0;
        for(i = 0; i < 14; i++)
        {
            cha = cha + buf[i];
            chb = chb + cha;
        }
        buf[14] = cha;
        buf[15] = chb;

        // 向串口发送CAN数据
        RTU_DEBUG("CAN%d recieve data: 0x%02X 0x%02X 0x%02X 0x%02X 0x%02X 0x%02X 0x%02X 0x%02X\r\n",
        channel, buf[6],buf[7],buf[8],buf[9],buf[10],buf[11],buf[12],buf[13]);
        
        ComxPutChar(pcom, BINTRANS_DLE);
        ComxPutChar(pcom, BINTRANS_STX);
        for(i = 0; i < 16; i++)
        {
            if(buf[i] == BINTRANS_DLE)
            {
                ComxPutChar(pcom, BINTRANS_DLE);
            }
            ComxPutChar(pcom, buf[i]);
        }

        ComxPutChar(pcom, BINTRANS_DLE);
        ComxPutChar(pcom, BINTRANS_ETX);
    }
}



